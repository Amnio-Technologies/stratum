pub mod lvgl_backend;
pub mod ui_logging;

/// FFI surface for C <-> Rust interoperation in the Stratum system.
///
/// This module exports either the raw bindgen-declared C function interfaces (`raw_bindings`)
/// or dynamically dispatched function wrappers (`dynamic_api`), depending on the target platform.
///
/// ### Runtime Behavior
/// - On firmware and non-desktop builds, functions such as `lvgl_setup()` are standard
///   `extern "C"` symbols resolved at compile time.
/// - On desktop builds, dynamic hot-reloading is supported:
///   - Function symbols like `lvgl_setup()` are replaced with wrappers that dispatch to
///     a runtime-loaded shared library (DLL or SO).
///   - These wrappers query a globally stored `Api` function table, updated via
///     `init_dynamic_bindings()`.
///   - This allows the system to replace the implementation of all public FFI functions
///     at runtime without altering the Rust-side call sites.
///
/// This abstraction allows platform-agnostic use of the `stratum_ui_ffi` API surface, while
/// enabling hot-reload behavior exclusively on desktop.
pub mod stratum_ui_ffi {
    #![allow(
        non_camel_case_types,
        non_snake_case,
        non_upper_case_globals,
        dead_code
    )]

    // -------------------------------------------------------------------------
    // Raw Bindgen Declarations — Always Compiled
    //
    // Contains C function/type/const declarations generated by bindgen. These
    // map 1:1 to the symbols exposed by the compiled C static or dynamic library.
    mod raw_bindings {
        #[cfg(windows)]
        include!(concat!(env!("OUT_DIR"), "\\bindings.rs"));
        #[cfg(unix)]
        include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
    }

    // -------------------------------------------------------------------------
    // Dynamic Dispatch Layer — Compiled on Desktop Only
    //
    // Replaces raw extern bindings with runtime-dispatch wrappers. These wrappers
    // delegate to a shared library that is loaded and swapped at runtime via
    // `init_dynamic_bindings()`.
    #[cfg(feature = "desktop")]
    mod dynamic_api {
        // Import all raw types, constants, and signatures for compatibility
        pub use super::raw_bindings::*;

        // Internal loader and function table definition (`Api`)
        mod internal_api {
            #[cfg(windows)]
            include!(concat!(env!("OUT_DIR"), "\\internal_api.rs"));
            #[cfg(unix)]
            include!(concat!(env!("OUT_DIR"), "/internal_api.rs"));
        }

        // Function wrappers that call into the currently active API table
        #[cfg(windows)]
        include!(concat!(env!("OUT_DIR"), "\\dynamic_api.rs"));
        #[cfg(unix)]
        include!(concat!(env!("OUT_DIR"), "/dynamic_api.rs"));

        // Expose only the dynamic loader function; keep internal symbols private
        pub use internal_api::init_dynamic_bindings;
    }

    // -------------------------------------------------------------------------
    // Final Export Surface
    //
    // Selects either dynamic (hot-reloadable) or static (bindgen) interface
    // based on the build target configuration.
    #[cfg(feature = "desktop")]
    pub use dynamic_api::*;
    #[cfg(not(feature = "desktop"))]
    pub use raw_bindings::*;
}
