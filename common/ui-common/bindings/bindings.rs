/* automatically generated by rust-bindgen 0.71.1 */

#[allow(dead_code)]

pub const LVGL_SCREEN_WIDTH: u32 = 320;
pub const LVGL_SCREEN_HEIGHT: u32 = 240;
pub const LogLevel_LOG_TRACE: LogLevel = 0;
pub const LogLevel_LOG_DEBUG: LogLevel = 1;
pub const LogLevel_LOG_INFO: LogLevel = 2;
pub const LogLevel_LOG_WARN: LogLevel = 3;
pub const LogLevel_LOG_ERROR: LogLevel = 4;
pub type LogLevel = ::std::os::raw::c_uint;
pub type ui_log_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        level: LogLevel,
        msg: *const ::std::os::raw::c_char,
    ),
>;
unsafe extern "C" {
    pub fn register_ui_log_callback(cb: ui_log_cb_t, user_data: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlatNode {
    pub ptr: usize,
    pub parent_ptr: usize,
    pub class_name: *const ::std::os::raw::c_char,
    pub x: i16,
    pub y: i16,
    pub w: i16,
    pub h: i16,
    pub hidden: bool,
    pub debug_id: *mut ::std::os::raw::c_void,
}
pub type tree_send_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        nodes: *const FlatNode,
        count: usize,
    ),
>;
unsafe extern "C" {
    pub fn register_tree_send_callback(cb: tree_send_cb_t, user_data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn export_tree();
}
unsafe extern "C" {
    pub fn lvgl_setup();
}
unsafe extern "C" {
    pub fn lvgl_teardown();
}
unsafe extern "C" {
    pub fn lvgl_update(dt_ms: u32);
}
unsafe extern "C" {
    pub fn get_lvgl_framebuffer() -> *mut u16;
}
unsafe extern "C" {
    pub fn get_lvgl_display_width() -> u32;
}
unsafe extern "C" {
    pub fn get_lvgl_display_height() -> u32;
}
unsafe extern "C" {
    pub fn lvgl_get_required_framebuffer_size() -> usize;
}
unsafe extern "C" {
    pub fn lvgl_register_external_buffer(buffer: *mut u16, buffer_bytes: usize);
}
#[doc = " SPI-send callback type.  is_data==false → command, true → pixel data."]
pub type ui_spi_send_cb_t =
    ::std::option::Option<unsafe extern "C" fn(is_data: bool, data: *const u8, len: usize)>;
unsafe extern "C" {
    #[doc = " Called by LVGL's flush_cb to push bytes out.  Must be registered\n by the platform code *before* lvgl_setup()."]
    pub fn lvgl_register_spi_send_cb(cb: ui_spi_send_cb_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_obj_t {
    _unused: [u8; 0],
}
#[doc = " Typedefs from various lvgl modules.\n They are defined here to avoid circular dependencies."]
pub type lv_obj_t = _lv_obj_t;
unsafe extern "C" {
    pub fn lvgl_label_text(label: *const lv_obj_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lvgl_obj_at_point(x: i32, y: i32) -> *mut lv_obj_t;
}
unsafe extern "C" {
    pub fn lvgl_obj_set_shown(obj: *mut lv_obj_t, hidden: bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UT_hash_bucket {
    pub hh_head: *mut UT_hash_handle,
    pub count: ::std::os::raw::c_uint,
    pub expand_mult: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UT_hash_table {
    pub buckets: *mut UT_hash_bucket,
    pub num_buckets: ::std::os::raw::c_uint,
    pub log2_num_buckets: ::std::os::raw::c_uint,
    pub num_items: ::std::os::raw::c_uint,
    pub tail: *mut UT_hash_handle,
    pub hho: isize,
    pub ideal_chain_maxlen: ::std::os::raw::c_uint,
    pub nonideal_items: ::std::os::raw::c_uint,
    pub ineff_expands: ::std::os::raw::c_uint,
    pub noexpand: ::std::os::raw::c_uint,
    pub signature: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UT_hash_handle {
    pub tbl: *mut UT_hash_table,
    pub prev: *mut ::std::os::raw::c_void,
    pub next: *mut ::std::os::raw::c_void,
    pub hh_prev: *mut UT_hash_handle,
    pub hh_next: *mut UT_hash_handle,
    pub key: *const ::std::os::raw::c_void,
    pub keylen: ::std::os::raw::c_uint,
    pub hashv: ::std::os::raw::c_uint,
}
#[doc = " A struct to hold creation metadata for each lv_obj_t*.\n We use `obj` as the hash key (i.e., the pointer value)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lvlens_meta_t {
    pub obj: *mut lv_obj_t,
    pub file: *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub helper_name: *const ::std::os::raw::c_char,
    pub hh: UT_hash_handle,
}
unsafe extern "C" {
    #[doc = " Look up metadata for a given object. Returns true if found,\n and fills out the metadata fields in `out_meta`. Otherwise returns false."]
    pub fn lvlens_get_metadata(obj: *mut lv_obj_t, out_meta: *mut lvlens_meta_t) -> bool;
}
unsafe extern "C" {
    pub fn make_all_clickable();
}
unsafe extern "C" {
    pub fn revert_clickability();
}
