/* automatically generated by rust-bindgen 0.71.1 */

#[allow(dead_code)]

pub const LVGL_SCREEN_WIDTH: u32 = 320;
pub const LVGL_SCREEN_HEIGHT: u32 = 240;
pub const LogLevel_LOG_TRACE: LogLevel = 0;
pub const LogLevel_LOG_DEBUG: LogLevel = 1;
pub const LogLevel_LOG_INFO: LogLevel = 2;
pub const LogLevel_LOG_WARN: LogLevel = 3;
pub const LogLevel_LOG_ERROR: LogLevel = 4;
pub type LogLevel = ::std::os::raw::c_uint;
pub type ui_log_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        level: LogLevel,
        msg: *const ::std::os::raw::c_char,
    ),
>;
unsafe extern "C" {
    pub fn register_ui_log_callback(cb: ui_log_cb_t, user_data: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlatNode {
    pub ptr: usize,
    pub parent_ptr: usize,
    pub class_name: *const ::std::os::raw::c_char,
    pub x: i16,
    pub y: i16,
    pub w: i16,
    pub h: i16,
    pub hidden: bool,
    pub debug_id: *mut ::std::os::raw::c_void,
}
pub type tree_send_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        nodes: *const FlatNode,
        count: usize,
    ),
>;
unsafe extern "C" {
    pub fn register_tree_send_callback(cb: tree_send_cb_t, user_data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn export_tree();
}
unsafe extern "C" {
    pub fn lvgl_setup();
}
unsafe extern "C" {
    pub fn lvgl_teardown();
}
unsafe extern "C" {
    pub fn lvgl_update(dt_ms: u32);
}
unsafe extern "C" {
    pub fn get_lvgl_framebuffer() -> *mut u16;
}
unsafe extern "C" {
    pub fn get_lvgl_display_width() -> u32;
}
unsafe extern "C" {
    pub fn get_lvgl_display_height() -> u32;
}
unsafe extern "C" {
    pub fn lvgl_get_required_framebuffer_size() -> usize;
}
unsafe extern "C" {
    pub fn lvgl_register_external_buffer(buffer: *mut u16, buffer_bytes: usize);
}
#[doc = " SPI-send callback type.  is_data==false → command, true → pixel data."]
pub type ui_spi_send_cb_t =
    ::std::option::Option<unsafe extern "C" fn(is_data: bool, data: *const u8, len: usize)>;
unsafe extern "C" {
    #[doc = " Called by LVGL's flush_cb to push bytes out.  Must be registered\n by the platform code *before* lvgl_setup()."]
    pub fn lvgl_register_spi_send_cb(cb: ui_spi_send_cb_t);
}
