/* automatically generated by rust-bindgen 0.71.1 */

#[allow(dead_code)]

pub const __MINGW64_VERSION_MAJOR: u32 = 13;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 1536;
pub const _WIN32_WINNT: u32 = 1537;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const LVGL_SCREEN_WIDTH: u32 = 320;
pub const LVGL_SCREEN_HEIGHT: u32 = 240;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
unsafe extern "C" {
    pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
}
pub type rsize_t = usize;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
    _unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of localeinfo_struct"][::std::mem::size_of::<localeinfo_struct>() - 16usize];
    ["Alignment of localeinfo_struct"][::std::mem::align_of::<localeinfo_struct>() - 8usize];
    ["Offset of field: localeinfo_struct::locinfo"]
        [::std::mem::offset_of!(localeinfo_struct, locinfo) - 0usize];
    ["Offset of field: localeinfo_struct::mbcinfo"]
        [::std::mem::offset_of!(localeinfo_struct, mbcinfo) - 8usize];
};
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLC_ID"][::std::mem::size_of::<tagLC_ID>() - 6usize];
    ["Alignment of tagLC_ID"][::std::mem::align_of::<tagLC_ID>() - 2usize];
    ["Offset of field: tagLC_ID::wLanguage"][::std::mem::offset_of!(tagLC_ID, wLanguage) - 0usize];
    ["Offset of field: tagLC_ID::wCountry"][::std::mem::offset_of!(tagLC_ID, wCountry) - 2usize];
    ["Offset of field: tagLC_ID::wCodePage"][::std::mem::offset_of!(tagLC_ID, wCodePage) - 4usize];
};
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
    pub refcount: ::std::os::raw::c_int,
    pub lc_codepage: ::std::os::raw::c_uint,
    pub lc_collate_cp: ::std::os::raw::c_uint,
    pub lc_handle: [::std::os::raw::c_ulong; 6usize],
    pub lc_id: [LC_ID; 6usize],
    pub lc_category: [threadlocaleinfostruct__bindgen_ty_1; 6usize],
    pub lc_clike: ::std::os::raw::c_int,
    pub mb_cur_max: ::std::os::raw::c_int,
    pub lconv_intl_refcount: *mut ::std::os::raw::c_int,
    pub lconv_num_refcount: *mut ::std::os::raw::c_int,
    pub lconv_mon_refcount: *mut ::std::os::raw::c_int,
    pub lconv: *mut lconv,
    pub ctype1_refcount: *mut ::std::os::raw::c_int,
    pub ctype1: *mut ::std::os::raw::c_ushort,
    pub pctype: *const ::std::os::raw::c_ushort,
    pub pclmap: *const ::std::os::raw::c_uchar,
    pub pcumap: *const ::std::os::raw::c_uchar,
    pub lc_time_curr: *mut __lc_time_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct__bindgen_ty_1 {
    pub locale: *mut ::std::os::raw::c_char,
    pub wlocale: *mut wchar_t,
    pub refcount: *mut ::std::os::raw::c_int,
    pub wrefcount: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of threadlocaleinfostruct__bindgen_ty_1"]
        [::std::mem::size_of::<threadlocaleinfostruct__bindgen_ty_1>() - 32usize];
    ["Alignment of threadlocaleinfostruct__bindgen_ty_1"]
        [::std::mem::align_of::<threadlocaleinfostruct__bindgen_ty_1>() - 8usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::locale"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, locale) - 0usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::wlocale"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, wlocale) - 8usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, refcount) - 16usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::wrefcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, wrefcount) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of threadlocaleinfostruct"][::std::mem::size_of::<threadlocaleinfostruct>() - 352usize];
    ["Alignment of threadlocaleinfostruct"]
        [::std::mem::align_of::<threadlocaleinfostruct>() - 8usize];
    ["Offset of field: threadlocaleinfostruct::refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, refcount) - 0usize];
    ["Offset of field: threadlocaleinfostruct::lc_codepage"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_codepage) - 4usize];
    ["Offset of field: threadlocaleinfostruct::lc_collate_cp"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_collate_cp) - 8usize];
    ["Offset of field: threadlocaleinfostruct::lc_handle"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_handle) - 12usize];
    ["Offset of field: threadlocaleinfostruct::lc_id"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_id) - 36usize];
    ["Offset of field: threadlocaleinfostruct::lc_category"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_category) - 72usize];
    ["Offset of field: threadlocaleinfostruct::lc_clike"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_clike) - 264usize];
    ["Offset of field: threadlocaleinfostruct::mb_cur_max"]
        [::std::mem::offset_of!(threadlocaleinfostruct, mb_cur_max) - 268usize];
    ["Offset of field: threadlocaleinfostruct::lconv_intl_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_intl_refcount) - 272usize];
    ["Offset of field: threadlocaleinfostruct::lconv_num_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_num_refcount) - 280usize];
    ["Offset of field: threadlocaleinfostruct::lconv_mon_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_mon_refcount) - 288usize];
    ["Offset of field: threadlocaleinfostruct::lconv"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv) - 296usize];
    ["Offset of field: threadlocaleinfostruct::ctype1_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, ctype1_refcount) - 304usize];
    ["Offset of field: threadlocaleinfostruct::ctype1"]
        [::std::mem::offset_of!(threadlocaleinfostruct, ctype1) - 312usize];
    ["Offset of field: threadlocaleinfostruct::pctype"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pctype) - 320usize];
    ["Offset of field: threadlocaleinfostruct::pclmap"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pclmap) - 328usize];
    ["Offset of field: threadlocaleinfostruct::pcumap"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pcumap) - 336usize];
    ["Offset of field: threadlocaleinfostruct::lc_time_curr"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_time_curr) - 344usize];
};
pub type threadlocinfo = threadlocaleinfostruct;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type int_least32_t = ::std::os::raw::c_int;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const LogLevel_LOG_TRACE: LogLevel = 0;
pub const LogLevel_LOG_DEBUG: LogLevel = 1;
pub const LogLevel_LOG_INFO: LogLevel = 2;
pub const LogLevel_LOG_WARN: LogLevel = 3;
pub const LogLevel_LOG_ERROR: LogLevel = 4;
pub type LogLevel = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn ui_log(level: LogLevel, msg: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn lvgl_setup();
}
unsafe extern "C" {
    pub fn lvgl_update();
}
unsafe extern "C" {
    pub fn get_lvgl_framebuffer() -> *mut u16;
}
unsafe extern "C" {
    pub fn get_lvgl_display_width() -> u32;
}
unsafe extern "C" {
    pub fn get_lvgl_display_height() -> u32;
}
unsafe extern "C" {
    pub fn lvgl_advance_timer(dt_ms: u32);
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub _address: u8,
}
